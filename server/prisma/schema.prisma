// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  email             String?
  phone_number      Int           @unique
  jobPosts          JobPost[]
  sentMessages      Message[]     @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
}

model Worker {
  id               Int       @id @default(autoincrement())
  name             String
  profession       String
  avatarUrl        String?
  rating           Float
  location         String
  experience       String
  familyBackground String?
  phone            String    @unique 
  email            String    @unique
  availability     String
  description      String
  skills           String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now())

  pastWork PastWork[]
  reviews  Review[]
}

model PastWork {
  id        Int      @id @default(autoincrement())
  company   String
  duration  String
  workerId  Int
  worker    Worker   @relation(fields: [workerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  author    String
  content   String
  rating    Float
  workerId  Int
  worker    Worker   @relation(fields: [workerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model JobPost {
  id           Int      @id @default(autoincrement())
  title        String
  category     String
  description  String
  salary       Float
  timing       String
  location     String
  experience   String
  preferences  String?
  availability String[]
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt  @default(now())
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Message {
    id           Int      @id @default(autoincrement())
    sender       User     @relation("SentMessages",fields : [senderId], references : [id])
    senderId     Int
    recipient    User?    @relation("ReceivedMessages", fields : [recipientId], references : [id])
    recipientId  Int
    messageType  MessageType
    content      String?
    fileUrl      String?
    timestamp    DateTime   @default(now())
}

enum MessageType{
  text
  file
}